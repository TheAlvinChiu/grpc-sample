// build.gradle
plugins {
    id 'java'
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'com.google.protobuf' version '0.9.4'
}

group = 'com.grpcsample'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
}

def grpcVersion = '1.61.0'
def protobufVersion = '3.25.1'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation 'javax.annotation:javax.annotation-api:1.3.2'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.1'
}

protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:${protobufVersion}"
    }
    plugins {
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }
    }
}

// 添加特定的運行任務 - 使用現代 Gradle 語法
tasks.register('generateCerts', JavaExec) {
    description = '運行 KeytoolCertificateGenerator 生成證書'
    mainClass = 'com.grpcsample.util.KeytoolCertificateGenerator'
    classpath = sourceSets.main.runtimeClasspath
}

tasks.register('runClient', JavaExec) {
    description = '運行 gRPC 客戶端'
    mainClass = 'com.grpcsample.client.GrpcClient'
    classpath = sourceSets.main.runtimeClasspath

    // 默認使用 TLS
    args 'Test User', 'tls'
}

tasks.register('printClasspath') {
    doLast {
        println sourceSets.main.runtimeClasspath.asPath
    }
}

// 配置測試使用 JUnit 5
tasks.named('test') {
    useJUnitPlatform()
}